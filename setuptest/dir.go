package setuptest

import (
	"testing"

	"github.com/gruntwork-io/terratest/modules/terraform"
)

// SetupTestResponse is a struct which contains the temporary directory, the plan, a cleanup function and an error.
type SetupTestResponse struct {
	TmpDir  string
	Plan    *terraform.PlanStruct
	Cleanup func()
	Err     error
}

// Dirs func begins the fluent test testup process.
// It takes a root directory and a test directory as parameters.
//
// The root directory is the directory containing the terraform code to be tested.
//
// The test directory is the directory containing the test code,
// it should either be blank to test the code in the root,
// or a relative path from the root directory.
func Dirs(rootdir, testdir string) DirType {
	return DirType{
		RootDir: rootdir,
		TestDir: testdir,
	}
}

// DirType is a type which can be used for more fluent setup of a test
type DirType struct {
	RootDir string
	TestDir string
}

// WithVars returns a type which can be used for more fluent setup of a test with variables
func (d DirType) WithVars(vars map[string]interface{}) DirTypeWithVars {
	return DirTypeWithVars{
		RootDir: d.RootDir,
		TestDir: d.TestDir,
		Vars:    vars,
	}
}

// WithVarFiles returns a type which can be used for more fluent setup of a test with variable files
func (d DirType) WithVarFiles(varfiles []string) DirTypeWithVarFiles {
	return DirTypeWithVarFiles{
		RootDir:  d.RootDir,
		TestDir:  d.TestDir,
		VarFiles: varfiles,
	}
}

// DirTypeWithVars is a type which can be used for more fluent setup of a test with variables
type DirTypeWithVars struct {
	RootDir string
	TestDir string
	Vars    map[string]interface{}
}

// DirTypeWithVarFiles is a type which can be used for more fluent setup of a test with variable files
type DirTypeWithVarFiles struct {
	RootDir  string
	TestDir  string
	VarFiles []string
}

// InitAndPlanAndShowWithStruct is a wrapper around terraform.InitAndPlanAndShowWithStructE
// It takes a test object as a parameter and returns a SetupTestResponse.
//
// The SetupTestResponse contains the temporary directory, the plan, a cleanup function and an error.
// The temporary directory is the directory containing a copy of the code specified by the Dirs func.
// The plan is the plan struct generated by terraform, which can be used by the check package.
// The cleanup function is a function which should be used with defer to clean up the temporary directory.
func (dtv DirTypeWithVars) InitAndPlanAndShowWithStruct(t *testing.T) SetupTestResponse {
	resp := SetupTestResponse{}

	tmp, cleanup, err := CopyTerraformFolderToTempAndCleanUp(t, dtv.RootDir, dtv.TestDir)
	if err != nil {
		resp.Err = err
		return resp
	}
	resp.Cleanup = cleanup

	opts := getDefaultTerraformOptions(t, tmp)
	opts.Vars = dtv.Vars
	plan, err := terraform.InitAndPlanAndShowWithStructE(t, opts)

	resp.Plan = plan
	resp.Err = err
	return resp
}
